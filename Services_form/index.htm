<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Our Services & Bundles</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"/>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f8fafc; }
        .selected-plan { box-shadow: 0 0 0 3px #6366f1; border-color: #6366f1; transform: scale(1.03); }
        .selected-service { background-color: #eef2ff; border-color: #818cf8; }
        .modal-container { transition: opacity 0.3s ease; }
        .modal-box { transition: transform 0.3s ease; }
        .loader { border: 4px solid #f3f3f3; border-top: 4px solid #6366f1; border-radius: 50%; width: 24px; height: 24px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .plan-option.dimmed { opacity: 0.5; pointer-events: none; }

        /* Floating Bubble Styles */
        #floating-bubble {
            top: 20px; /* Position top */
            left: 20px; /* Position left */
            bottom: auto; /* Reset bottom */
            right: auto; /* Reset right */
            padding: 1rem 1.5rem; /* Adjust padding to fit content */
            width: auto; /* Allow width to fit content */
            height: auto; /* Allow height to fit content */
            white-space: nowrap; /* Prevent text from wrapping */
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto px-4 py-8 md:py-12">

        <!-- Header -->
        <header class="text-center mb-16">
            <h1 class="text-4xl md:text-6xl font-extrabold text-gray-900">Build Your Perfect Plan</h1>
            <p class="text-lg text-gray-600 mt-3 max-w-2xl mx-auto">Select a membership, add your services, and get an instant quote. Powerful solutions tailored for you.</p>
        </header>

        <!-- Smart Recommendation Section -->
        <section class="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-6 md:p-8 mb-12 border border-gray-200">
            <h2 class="text-2xl font-bold text-center text-gray-800 mb-4">Need Help Choosing? ✨</h2>
            <p class="text-center text-gray-600 mb-6">Describe your goals and our AI will suggest the best plan and services for you!</p>
            <div class="space-y-4">
                <textarea id="business-needs" rows="3" class="w-full px-4 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="e.g., 'I need a professional website and monthly social media content to grow my real estate business.'"></textarea>
                <button id="get-recommendation-btn" class="w-full flex items-center justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-lg font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <span id="recommendation-btn-text">Get AI Recommendation</span>
                    <span id="recommendation-loader" class="loader hidden"></span>
                </button>
                <div id="recommendation-message" class="mt-4 p-3 rounded-lg text-center hidden"></div>
            </div>
        </section>

        <!-- Step 1: Membership Plans -->
        <section class="mb-16">
            <h2 class="text-3xl font-bold text-center mb-2"><span class="text-indigo-600">Step 1:</span> Choose Your Plan</h2>
            <p class="text-center text-gray-600 mb-10">Plans provide discounts on all add-on services.</p>
            <div id="plan-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
                <!-- Plan cards will be injected here -->
            </div>
        </section>

        <!-- Step 2: Add-On Services -->
        <section class="mb-16">
            <h2 class="text-3xl font-bold text-center mb-2"><span class="text-indigo-600">Step 2:</span> Select Add-On Services</h2>
            <p class="text-center text-gray-600 mb-10">Enhance your plan with any of our professional services.</p>
            <div id="category-buttons" class="flex flex-wrap justify-center gap-3 mb-8 max-w-4xl mx-auto"></div>
            <div id="services-container" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 max-w-7xl mx-auto">
                <!-- Service cards will be injected here -->
            </div>
        </section>

        <!-- Step 3: Live Estimation -->
        <section class="mb-16">
            <h2 class="text-3xl font-bold text-center mb-2"><span class="text-indigo-600">Step 3:</span> Your Live Estimate</h2>
            <p class="text-center text-gray-600 mb-10">Review your selections and estimated monthly cost.</p>
            <div class="max-w-xl mx-auto bg-white rounded-2xl shadow-lg p-6 md:p-8 border border-gray-200">
                <div class="space-y-4">
                    <div class="flex justify-between items-center text-lg">
                        <span class="font-medium text-gray-600">Selected Plan:</span>
                        <span id="estimate-plan-name" class="font-bold text-gray-900">Custom Bundle</span>
                    </div>
                    <div class="flex justify-between items-center text-lg">
                        <span class="font-medium text-gray-600">Plan Price:</span>
                        <span id="estimate-plan-price" class="font-bold text-gray-900">AED 0.00</span>
                    </div>
                    <div class="flex justify-between items-center text-lg">
                        <span class="font-medium text-gray-600">Services Total:</span>
                        <span id="estimate-services-total" class="font-bold text-gray-900">AED 0.00</span>
                    </div>
                    <hr class="my-2">
                    <div class="flex justify-between items-center text-3xl">
                        <span class="font-bold text-indigo-600">Estimated Monthly Total:</span>
                        <span id="estimate-monthly-total" class="font-bold text-indigo-600">AED 0.00</span>
                    </div>
                </div>
            </div>
        </section>

        <!-- Step 4: Customer Details & Quotation -->
        <section id="customer-details-section" class="max-w-3xl mx-auto">
             <h2 class="text-3xl font-bold text-center mb-2"><span class="text-indigo-600">Step 4:</span> Submit Your Offer Request</h2>
             <p class="text-center text-gray-600 mb-10">Fill in your details to generate a formal offer.</p>
             <div class="bg-white rounded-2xl shadow-lg p-8 border border-gray-200">
                <form id="customer-form" class="space-y-6">
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                        <div><label for="name" class="block text-sm font-medium text-gray-700">Full Name</label><input type="text" id="name" required class="mt-1 w-full px-4 py-3 bg-gray-50 border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"></div>
                        <div><label for="email" class="block text-sm font-medium text-gray-700">Email Address</label><input type="email" id="email" required class="mt-1 w-full px-4 py-3 bg-gray-50 border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"></div>
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-3 gap-6">
                        <div class="sm:col-span-1"><label for="country-code" class="block text-sm font-medium text-gray-700">Code</label><select id="country-code" class="mt-1 w-full px-4 py-3 bg-gray-50 border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"><option value="+971" selected>UAE (+971)</option><option value="+1">USA (+1)</option></select></div>
                        <div class="sm:col-span-2"><label for="mobile" class="block text-sm font-medium text-gray-700">Mobile Number</label><input type="tel" id="mobile" required placeholder="501234567" class="mt-1 w-full px-4 py-3 bg-gray-50 border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"></div>
                    </div>
                    <div id="form-error" class="text-red-600 text-sm hidden bg-red-100 p-3 rounded-lg">Please fill out all fields correctly.</div>
                    <button type="submit" id="submit-offer-btn" class="w-full flex justify-center py-4 px-4 border border-transparent rounded-lg shadow-sm text-lg font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <span id="submit-offer-text">Submit Offer Request</span>
                        <span id="submit-offer-loader" class="loader hidden"></span>
                    </button>
                </form>
             </div>
        </section>
    </div>

    <!-- Floating Bubble -->
    <div id="floating-bubble" class="fixed z-40 bg-indigo-600 text-white rounded-full shadow-lg flex items-center justify-center cursor-pointer transform transition-transform hover:scale-105">
        <div class="text-center">
            <p class="text-xs opacity-80">Total</p>
            <p id="bubble-total" class="text-lg font-bold">AED 0.00</p>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="modal-container fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center p-4 z-50 hidden opacity-0">
        <div class="modal-box bg-white rounded-2xl shadow-2xl w-full max-w-lg transform scale-95 p-6 text-center">
            <i class="fas fa-check-circle text-green-500 text-6xl mb-4"></i>
            <h2 class="text-2xl font-bold mb-2">Offer Request Submitted!</h2>
            <p class="text-gray-600 mb-4">Thank you! Your offer has been generated successfully. We will contact you shortly with payment instructions.</p>
            <div class="bg-gray-100 p-4 rounded-lg">
                <p class="font-bold text-lg">Your Offer ID:</p>
                <p id="offer-id-display" class="text-2xl font-extrabold text-indigo-600">OFFER-12345</p>
            </div>
            <button id="close-modal" class="mt-6 w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700">Close</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const eles = {
                planContainer: document.getElementById('plan-container'),
                servicesContainer: document.getElementById('services-container'),
                categoryButtons: document.getElementById('category-buttons'),
                estimatePlanName: document.getElementById('estimate-plan-name'),
                estimatePlanPrice: document.getElementById('estimate-plan-price'),
                estimateServicesTotal: document.getElementById('estimate-services-total'),
                estimateMonthlyTotal: document.getElementById('estimate-monthly-total'),
                bubbleTotal: document.getElementById('bubble-total'),
                customerForm: document.getElementById('customer-form'),
                confirmationModal: document.getElementById('confirmation-modal'),
                modalBox: document.querySelector('.modal-box'),
                closeModalBtn: document.getElementById('close-modal'),
                offerIdDisplay: document.getElementById('offer-id-display'),
                submitOfferBtn: document.getElementById('submit-offer-btn'),
                submitOfferText: document.getElementById('submit-offer-text'),
                submitOfferLoader: document.getElementById('submit-offer-loader'),
                formError: document.getElementById('form-error'),
                needsTextarea: document.getElementById('business-needs'),
                getRecoBtn: document.getElementById('get-recommendation-btn'),
                recoBtnText: document.getElementById('recommendation-btn-text'),
                recoLoader: document.getElementById('recommendation-loader'),
                recoMessage: document.getElementById('recommendation-message'),
            };

            let allServices = [], allPlans = [];
            let selectedServices = new Map();
            let currentCategory = 'All';

            // Fallback recommendations for AI if API fails or returns invalid response
            const fallbackRecommendations = [
                { plan: "Lite", services: ["🎥 Simple Video Shooting – Agent on Camera", "📝 Scriptwriting – Reels / Educational"] },
                { plan: "Basic", services: ["✂️ Pro Video Editing – Multi-part or Effects", "🖼️ Static Post Design – Feed", "📢 Motivational / Engagement Story Creation"] },
                { plan: "Pro", services: ["🌐 Website Homepage Design ( Profile)", "📲 Full Social Media Account Management"] },
                { plan: "Custom Bundle", services: ["📸 Property Photo Shoot (Interior + Exterior)", "📝 Ad Copy – Property or Offer"] }
            ];

            async function fetchData() {
                try {
                    const res = await fetch(`services.json?t=${new Date().getTime()}`);
                    const data = await res.json();
                    console.log("Fetched services data:", data.services);
                    console.log("Fetched plans data:", data.plans);
                    allServices = data.services;
                    allPlans = data.plans;
                    renderPlans();
                    renderCategories();
                    renderServices();
                    calculateTotal();
                } catch (err) { 
                    console.error("Data fetch failed:", err);
                    eles.formError.innerText = "Failed to load services and plans. Please check services.json.";
                    eles.formError.classList.remove('hidden');
                }
            }

            const formatCurrency = (val) => `AED ${val.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;

            function renderPlans() {
                eles.planContainer.innerHTML = allPlans.map(plan => `
                    <label class="plan-option bg-white rounded-2xl shadow-md p-6 text-center border-2 border-transparent hover:border-indigo-400 transition-all duration-300 cursor-pointer flex flex-col">
                        <input type="radio" name="membership-plan" class="sr-only" data-name="${plan.name}" ${plan.name === 'Custom Bundle' ? 'checked' : ''}>
                        <h3 class="text-2xl font-bold mb-2">${plan.name}</h3>
                        <p class="text-gray-600 mb-4 flex-grow">${plan.price > 0 ? `Get a ${plan.discount * 100}% discount on services.` : 'Pay-as-you-go for services.'}</p>
                        <div class="text-4xl font-extrabold text-indigo-600">${plan.price > 0 ? formatCurrency(plan.price) : 'Free'}</div>
                        <div class="text-sm font-medium text-gray-500 mt-1">Per Month</div>
                    </label>
                `).join('');
                eles.planContainer.addEventListener('change', () => calculateTotal());
            }

            function renderCategories() {
                const categories = ['All', ...new Set(allServices.map(s => s.category))];
                eles.categoryButtons.innerHTML = categories.map(cat => `
                    <button data-category="${cat}" class="category-btn px-4 py-2 rounded-full font-semibold text-sm transition-colors ${currentCategory === cat ? 'bg-indigo-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-200'}">${cat}</button>
                `).join('');
                eles.categoryButtons.querySelectorAll('.category-btn').forEach(btn => btn.addEventListener('click', () => {
                    currentCategory = btn.dataset.category;
                    renderCategories();
                    renderServices();
                }));
            }

            function renderServices() {
                const filteredServices = currentCategory === 'All' ? allServices : allServices.filter(s => s.category === currentCategory);
                if (filteredServices.length === 0) {
                    eles.servicesContainer.innerHTML = '<p class="text-center text-gray-500 col-span-full">No services found in this category.</p>';
                    return;
                }
                eles.servicesContainer.innerHTML = filteredServices.map(service => {
                    const isSelected = selectedServices.has(service.name);
                    const qty = selectedServices.get(service.name) || 1;
                    return `
                    <div class="service-card bg-white rounded-2xl shadow-md p-5 border-2 transition-all ${isSelected ? 'selected-service' : 'border-transparent'}" data-name="${service.name}">
                        <div class="flex-1 mb-4">
                            <p class="text-sm text-indigo-500 font-semibold">${service.category}</p>
                            <h4 class="text-lg font-bold text-gray-800 mt-1">${service.name}</h4>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-2xl font-extrabold text-gray-900">${formatCurrency(service.price)}</span>
                            <div class="flex items-center gap-2 ${isSelected ? '' : 'hidden'}">
                                <button class="qty-btn" data-action="decrease"><i class="fas fa-minus-circle text-indigo-500"></i></button>
                                <span class="qty-val font-bold text-lg">${qty}</span>
                                <button class="qty-btn" data-action="increase"><i class="fas fa-plus-circle text-indigo-500"></i></button>
                            </div>
                            <button class="select-btn text-white font-bold py-2 px-4 rounded-lg transition-colors ${isSelected ? 'bg-red-500 hover:bg-red-600' : 'bg-indigo-500 hover:bg-indigo-600'}">
                                ${isSelected ? 'Remove' : 'Select'}
                            </button>
                        </div>
                    </div>`;
                }).join('');
            }

            eles.servicesContainer.addEventListener('click', e => {
                const card = e.target.closest('.service-card');
                if (!card) return;
                const serviceName = card.dataset.name;

                if (e.target.closest('.select-btn')) {
                    if (selectedServices.has(serviceName)) {
                        selectedServices.delete(serviceName);
                    } else {
                        selectedServices.set(serviceName, 1);
                    }
                } else if (e.target.closest('.qty-btn')) {
                    const action = e.target.closest('.qty-btn').dataset.action;
                    let qty = selectedServices.get(serviceName) || 1;
                    if (action === 'increase') qty++;
                    else if (action === 'decrease' && qty > 1) qty--;
                    selectedServices.set(serviceName, qty);
                }
                renderServices();
                calculateTotal();
            });

            function calculateTotal() {
                const selectedPlanEl = document.querySelector('input[name="membership-plan"]:checked');
                document.querySelectorAll('.plan-option').forEach(opt => opt.classList.remove('selected-plan'));
                if(selectedPlanEl) selectedPlanEl.closest('.plan-option').classList.add('selected-plan');

                const planName = selectedPlanEl.dataset.name;
                const planData = allPlans.find(p => p.name === planName);
                const planPrice = planData.price;
                const planDiscount = planData.discount;

                let servicesTotal = 0;
                for (const [name, qty] of selectedServices.entries()) {
                    const service = allServices.find(s => s.name === name);
                    servicesTotal += service.price * qty * (1 - planDiscount);
                }

                eles.estimatePlanName.textContent = planName;
                eles.estimatePlanPrice.textContent = formatCurrency(planPrice);
                eles.estimateServicesTotal.textContent = formatCurrency(servicesTotal);
                eles.estimateMonthlyTotal.textContent = formatCurrency(planPrice + servicesTotal);
                eles.bubbleTotal.textContent = formatCurrency(planPrice + servicesTotal);
            }

            eles.customerForm.addEventListener('submit', async e => {
                e.preventDefault();
                const name = eles.customerForm.querySelector('#name').value.trim();
                const email = eles.customerForm.querySelector('#email').value.trim();
                const mobile = eles.customerForm.querySelector('#mobile').value.trim();
                const countryCode = eles.customerForm.querySelector('#country-code').value;
                if (!name || !email || !mobile) {
                    eles.formError.innerText = "Please fill out all fields.";
                    eles.formError.classList.remove('hidden');
                    return;
                }
                eles.formError.classList.add('hidden');

                const selectedPlanEl = document.querySelector('input[name="membership-plan"]:checked');
                const planName = selectedPlanEl.dataset.name;
                const planData = allPlans.find(p => p.name === planName);
                const planPrice = planData.price;
                const planDiscount = planData.discount;

                let servicesTotal = 0;
                const servicesList = [];
                for (const [name, qty] of selectedServices.entries()) {
                    const service = allServices.find(s => s.name === name);
                    const discountedPrice = service.price * (1 - planDiscount);
                    servicesTotal += discountedPrice * qty;
                    servicesList.push({ name, qty, price: discountedPrice });
                }
                const totalPrice = planPrice + servicesTotal;

                const offerData = {
                    customer: { name, email, mobile: `${countryCode}${mobile}` },
                    plan: { name: planName, price: planPrice },
                    services: servicesList,
                    totalPrice: totalPrice
                };

                setLoading(true);
                try {
                    const response = await fetch('create_offer.php', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(offerData)
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.message || 'Failed to create offer.');
                    
                    eles.offerIdDisplay.textContent = result.offer.id;
                    openModal();
                    eles.customerForm.reset();
                    selectedServices.clear();
                    renderServices();
                    calculateTotal();

                } catch (error) {
                    console.error('Offer submission error:', error);
                    eles.formError.innerText = `Error: ${error.message}`;
                    eles.formError.classList.remove('hidden');
                } finally {
                    setLoading(false);
                }
            });

            function setLoading(isLoading) {
                if (isLoading) {
                    eles.submitOfferText.classList.add('hidden');
                    eles.submitOfferLoader.classList.remove('hidden');
                    eles.submitOfferBtn.disabled = true;
                } else {
                    eles.submitOfferText.classList.remove('hidden');
                    eles.submitOfferLoader.classList.add('hidden');
                    eles.submitOfferBtn.disabled = false;
                }
            }

            function openModal() {
                eles.confirmationModal.classList.remove('hidden');
                setTimeout(() => {
                    eles.confirmationModal.classList.remove('opacity-0');
                    eles.modalBox.classList.remove('scale-95');
                }, 10);
            }

            function closeModal() {
                eles.confirmationModal.classList.add('opacity-0');
                eles.modalBox.classList.add('scale-95');
                setTimeout(() => eles.confirmationModal.classList.add('hidden'), 300);
            }
            eles.closeModalBtn.addEventListener('click', closeModal);

            // AI Recommendation Logic
            eles.getRecoBtn.addEventListener('click', async () => {
                const businessNeeds = eles.needsTextarea.value.trim();
                if (!businessNeeds) {
                    eles.recoMessage.className = 'mt-4 p-3 rounded-lg text-center text-red-700 bg-red-100';
                    eles.recoMessage.innerText = 'Please describe your business goals to get a recommendation.';
                    eles.recoMessage.classList.remove('hidden');
                    return;
                }

                const apiKey = "AIzaSyCAVsYKBiAL0oXtZ5weAXXRbX7J6GOrJII"; // IMPORTANT: Insert your Google Cloud API Key here
                if (!apiKey || apiKey === "YOUR_API_KEY_HERE") {
                    eles.recoMessage.className = 'mt-4 p-3 rounded-lg text-center text-red-700 bg-red-100';
                    eles.recoMessage.innerHTML = '<strong>API Key Missing!</strong> Please insert your Google Cloud API key in index.htm to use AI recommendations.';
                    eles.recoMessage.classList.remove('hidden');
                    return;
                }

                eles.recoBtnText.classList.add('hidden');
                eles.recoLoader.classList.remove('hidden');
                eles.getRecoBtn.disabled = true;
                eles.recoMessage.classList.add('hidden');

                const availablePlansStr = allPlans.map(p => p.name).join(', ');
                const availableServicesStr = allServices.map(s => `${s.name} (Category: ${s.category})`).join('; ');
                const prompt = `Based on the following business needs: "${businessNeeds}", recommend the most suitable membership plan and a list of up to 3 additional add-on services from the provided lists. The output should be a JSON object with 'plan' (string, e.g., 'Lite', 'Basic', 'Custom Bundle') and 'services' (array of strings, full service names). Prioritize services that directly address the user's needs. If no services are selected, return an empty array for 'services'.\n\nAvailable Plans: ${availablePlansStr}\nAvailable Services: ${availableServicesStr}`;
                
                const payload = {
                    contents: [{ role: "user", parts: [{ text: prompt }] }],
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "OBJECT",
                            properties: {
                                "plan": { "type": "STRING" },
                                "services": { "type": "ARRAY", "items": { "type": "STRING" } }
                            },
                            "required": ["plan", "services"]
                        }
                    }
                };

                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const result = await response.json();

                    let recommendedPlanName;
                    let recommendedServices;

                    if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
                        const json = result.candidates[0].content.parts[0].text;
                        const parsedJson = JSON.parse(json);
                        recommendedPlanName = parsedJson.plan;
                        recommendedServices = parsedJson.services;

                        eles.recoMessage.className = 'mt-4 p-3 rounded-lg text-center text-green-700 bg-green-100 border border-green-200';
                        eles.recoMessage.innerHTML = `
                            <div class="flex items-center justify-center gap-2 mb-2">
                                <i class="fas fa-check-circle text-green-500"></i>
                                <span class="font-semibold">Recommendation Applied!</span>
                            </div>
                            <div class="text-left">
                                <p><span class="font-medium">Plan:</span> <span class="font-bold text-indigo-700">${recommendedPlanName}</span></p>
                                <p><span class="font-medium">Services:</span> ${recommendedServices.length > 0 ? recommendedServices.map(s => `<span class="font-bold text-gray-800">${s}</span>`).join(', ') : 'None'}</p>
                            </div>
                        `;

                    } else {
                        // Fallback if AI response is invalid
                        const randomIndex = Math.floor(Math.random() * fallbackRecommendations.length);
                        const fallback = fallbackRecommendations[randomIndex];
                        recommendedPlanName = fallback.plan;
                        recommendedServices = fallback.services;

                        eles.recoMessage.className = 'mt-4 p-3 rounded-lg text-center text-yellow-700 bg-yellow-100 border border-yellow-200';
                        eles.recoMessage.innerHTML = `
                            <div class="flex items-center justify-center gap-2 mb-2">
                                <i class="fas fa-exclamation-triangle text-yellow-500"></i>
                                <span class="font-semibold">AI Recommendation Failed. Applying a sample recommendation.</span>
                            </div>
                            <div class="text-left">
                                <p><span class="font-medium">Plan:</span> <span class="font-bold text-indigo-700">${recommendedPlanName}</span></p>
                                <p><span class="font-medium">Services:</span> ${recommendedServices.length > 0 ? recommendedServices.map(s => `<span class="font-bold text-gray-800">${s}</span>`).join(', ') : 'None'}</p>
                            </div>
                        `;
                    }
                    applyRecommendation(recommendedPlanName, recommendedServices);

                } catch (error) {
                    console.error('Error fetching recommendation:', error);
                    // Fallback on network/API error
                    const randomIndex = Math.floor(Math.random() * fallbackRecommendations.length);
                    const fallback = fallbackRecommendations[randomIndex];
                    const recommendedPlanName = fallback.plan;
                    const recommendedServices = fallback.services;

                    applyRecommendation(recommendedPlanName, recommendedServices);

                    eles.recoMessage.className = 'mt-4 p-3 rounded-lg text-center text-red-700 bg-red-100 border border-red-200';
                    eles.recoMessage.innerHTML = `
                        <div class="flex items-center justify-center gap-2 mb-2">
                            <i class="fas fa-times-circle text-red-500"></i>
                            <span class="font-semibold">Error getting AI recommendation. Applying a sample recommendation.</span>
                        </div>
                        <div class="text-left">
                            <p><span class="font-medium">Plan:</span> <span class="font-bold text-indigo-700">${recommendedPlanName}</span></p>
                            <p><span class="font-medium">Services:</span> ${recommendedServices.length > 0 ? recommendedServices.map(s => `<span class="font-bold text-gray-800">${s}</span>`).join(', ') : 'None'}</p>
                        </div>
                    `;
                } finally {
                    eles.recoMessage.classList.remove('hidden');
                    eles.recoBtnText.classList.remove('hidden');
                    eles.recoLoader.classList.add('hidden');
                    eles.getRecoBtn.disabled = false;
                }
            });

            function applyRecommendation(planName, serviceNames) {
                // Select the recommended plan
                const targetPlanInput = Array.from(document.querySelectorAll('input[name="membership-plan"]')).find(input => input.dataset.name === planName);
                if (targetPlanInput) {
                    targetPlanInput.checked = true;
                    targetPlanInput.dispatchEvent(new Event('change')); // Trigger change to update price
                } else {
                    console.warn(`Recommended plan "${planName}" not found. Defaulting to Custom Bundle.`);
                    document.querySelector('input[name="membership-plan"][data-name="Custom Bundle"]').checked = true;
                    document.querySelector('input[name="membership-plan"][data-name="Custom Bundle"]').dispatchEvent(new Event('change'));
                }

                // Clear existing service selections
                selectedServices.clear();

                // Select recommended services and set quantity to 1
                serviceNames.forEach(recService => {
                    const serviceExists = allServices.some(s => s.name === recService);
                    if (serviceExists) {
                        selectedServices.set(recService, 1);
                    } else {
                        console.warn(`Recommended service "${recService}" not found in available services.`);
                    }
                });

                renderServices(); // Re-render services to reflect selections
                calculateTotal(); // Recalculate total after all changes
            }

            fetchData();
        });
    </script>
</body>
</html>